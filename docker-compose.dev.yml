version: '3.8'

# Este arquivo sobrescreve o docker-compose.yml principal para o ambiente de desenvolvimento.

services:
  frontend:
    container_name: rjchronos_frontend_dev
    ports:
      - "3000:3000"
    build:
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/frontend:/app
      - /app/node_modules # Impede que o node_modules local sobrescreva o do contêiner
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend:
    container_name: rjchronos_backend_dev
    build:
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/backend-api:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      - db-app
      - redis
      - rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - REDIS_PASSWORD=${REDIS_PASSWORD}

  # --- Novos Serviços ---
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rjchronos_rabbitmq_dev
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - rjchronos-net
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data_dev:/var/lib/rabbitmq # Persistência de dados em dev
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running", "-q"]
      interval: 30s
      timeout: 10s
      retries: 5

  works:
    build:
      context: ./services/works
      dockerfile: Dockerfile.dev
    container_name: rjchronos_works_dev
    volumes:
      - ./services/works:/app
    networks:
      - rjchronos-net
    depends_on:
      - rabbitmq
      - redis
    command: python -u main.py
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - REDIS_PASSWORD=${REDIS_PASSWORD}

  olt-manager-huawei:
    build:
      context: ./services/olts-managers/olt-manager-huawei
      dockerfile: Dockerfile
    container_name: rjchronos_olt_manager_huawei_dev
    volumes:
      - ./services/olts-managers/olt-manager-huawei/src:/app/src
    networks:
      - rjchronos-net
    command: uvicorn src.main:app --host 0.0.0.0 --port 8001 --reload

  genieacs-sim:
    image: drumsergio/genieacs-sim:latest
    container_name: "rjchronos_genieacs-sim_dev"
    networks:
      - rjchronos-net
    depends_on:
      - genieacs

  genieacs-mcp:
    image: drumsergio/genieacs-mcp:latest
    container_name: "rjchronos_genieacs-mcp_dev"
    environment:
      - ACS_URL=http://genieacs:7557
      - ACS_USER=admin
      - ACS_PASS=admin
    ports:
      - "8081:8080"
    networks:
      - rjchronos-net
    depends_on:
      - genieacs

  # --- Nomes e Volumes Específicos para DEV ---
  genieacs:
    container_name: rjchronos_genieacs_dev

  reverse-proxy:
    container_name: rjchronos_proxy_dev
    volumes:
      - ./infrastructure/nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf:ro
  
  db-app:
    container_name: rjchronos_db_app_dev
    volumes:
      - postgres_app_data_dev:/var/lib/postgresql/data

  db-acs:
    container_name: rjchronos_db_acs_dev
    volumes:
      - mongo_acs_data_dev:/data/db

  redis:
    container_name: rjchronos_redis_dev
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_dev:/data # Persistência de dados em dev
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_app_data_dev:
  mongo_acs_data_dev:
  rabbitmq_data_dev:
  redis_data_dev:

networks:
  rjchronos-net:
    driver: bridge