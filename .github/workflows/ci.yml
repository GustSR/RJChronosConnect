# Nome do Workflow
name: CI - Build e Teste

# Gatilhos: Quando o workflow deve rodar
on:
  # Roda em pushes para a branch principal
  push:
    branches: [ "main" ]
  # Roda em pull requests que têm a branch main como alvo
  pull_request:
    branches: [ "main" ]

# Tarefas a serem executadas
jobs:
  # Nome da tarefa
  build-and-test:
    # Máquina virtual onde a tarefa vai rodar
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Baixar o código do repositório para a máquina virtual
      - name: Checkout do código
        uses: actions/checkout@v4

      # Passo 2: Configurar o QEMU para builds multi-plataforma (boa prática)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Passo 3: Configurar o Docker Buildx (builder moderno do Docker)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Passo 4: Fazer login no Docker Hub (opcional, necessário para imagens privadas)
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Passo 5: Construir todas as imagens definidas no docker-compose
      # Este é o nosso principal teste de integração por enquanto.
      # Se este passo falhar, significa que um Dockerfile está quebrado.
      - name: Construir imagens Docker
        run: docker-compose build

      # --- Passos Futuros (descomentar quando os testes e linters estiverem prontos) ---
      # - name: Rodar Linters
      #   run: |
      #     docker-compose run --rm backend ruff check .
      #     docker-compose run --rm frontend npm run lint

      # - name: Rodar Testes
      #   run: |
      #     docker-compose run --rm backend pytest
      #     docker-compose run --rm frontend npm test
