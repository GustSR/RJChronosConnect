"""
OLT Manager - Huawei
Microsservi√ßo especializado para gest√£o de OLTs Huawei.

Arquitetura organizada por dom√≠nios:
- OLT: Gest√£o do equipamento (portas PON, perfis, configura√ß√µes)
- ONT: Gest√£o de clientes (provisionamento, monitoramento, diagn√≥sticos)
- Health: Monitoramento do servi√ßo
"""

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

from .trap_listener.listener import TrapListener
from .core.exceptions import OLTException, OLTObjectNotFound
from .core.logging import get_logger
from .services.connection_pool import pool_manager

# Import das rotas organizadas por dom√≠nio
from .api import olt_routes, ont_routes, health_routes

# ============================================================================
# CONFIGURA√á√ÉO DA APLICA√á√ÉO
# ============================================================================

app = FastAPI(
    title="OLT Manager - Huawei",
    description="""
    Microsservi√ßo especializado para gest√£o de equipamentos OLT Huawei.

    ## Funcionalidades

    ### üèóÔ∏è Gest√£o de OLT
    - Configura√ß√£o de portas PON
    - Gest√£o de perfis e VLANs
    - Backup e restore
    - Monitoramento de hardware

    ### üë• Gest√£o de ONTs/Clientes
    - Provisionamento autom√°tico
    - Monitoramento em tempo real
    - Diagn√≥sticos avan√ßados
    - Descoberta autom√°tica (autofind)

    ### üìä Monitoramento
    - Health checks
    - Estat√≠sticas de pool de conex√£o
    - Eventos SNMP em tempo real
    """,
    version="0.5.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# ============================================================================
# TRATAMENTO DE EXCE√á√ïES
# ============================================================================

@app.exception_handler(OLTException)
async def olt_exception_handler(request: Request, exc: OLTException):
    """Tratamento personalizado para exce√ß√µes da OLT."""
    return JSONResponse(
        status_code=400,
        content={
            "error": "OLT_ERROR",
            "message": f"Erro na OLT: {exc.message}",
            "details": exc.extra
        },
    )

@app.exception_handler(OLTObjectNotFound)
async def olt_object_not_found_handler(request: Request, exc: OLTObjectNotFound):
    """Tratamento personalizado para objetos n√£o encontrados na OLT."""
    return JSONResponse(
        status_code=404,
        content={
            "error": "OBJECT_NOT_FOUND",
            "message": f"Objeto n√£o encontrado na OLT: {exc.message}",
            "details": exc.extra
        },
    )

# ============================================================================
# CONFIGURA√á√ÉO DE ROTAS POR DOM√çNIO
# ============================================================================

# Rotas de gest√£o de OLT (equipamento)
app.include_router(
    olt_routes.router,
    tags=["üèóÔ∏è OLT Management"]
)

# Rotas de gest√£o de ONT (clientes)
app.include_router(
    ont_routes.router,
    tags=["üë• ONT Management"]
)

# Rotas de health e monitoramento
app.include_router(
    health_routes.router,
    tags=["üìä Health & Monitoring"]
)

# ============================================================================
# LIFECYCLE DO SERVI√áO
# ============================================================================

trap_listener = TrapListener()
logger = get_logger(__name__)

@app.on_event("startup")
def startup_event():
    """
    Inicializa√ß√£o do microsservi√ßo.

    - Inicia o listener de traps SNMP para eventos em tempo real
    - Configura pools de conex√£o SSH
    - Prepara integra√ß√£o com RabbitMQ
    """
    try:
        logger.info("üöÄ Iniciando OLT Manager - Huawei v0.5.0")

        # Iniciar listener de traps SNMP
        trap_listener.iniciar()
        logger.info("‚úÖ Listener de traps SNMP iniciado com sucesso")

        # Log de configura√ß√£o
        logger.info("üì° Microsservi√ßo pronto para receber requisi√ß√µes")
        logger.info("üîó Endpoints organizados por dom√≠nio:")
        logger.info("   ‚Ä¢ /api/v1/olts/* - Gest√£o de OLT")
        logger.info("   ‚Ä¢ /api/v1/olts/*/onts/* - Gest√£o de ONT")
        logger.info("   ‚Ä¢ /health - Health check")

    except Exception as e:
        # Se o listener falhar, o servi√ßo ainda pode funcionar para APIs
        logger.critical(f"‚ùå Falha ao iniciar listener de traps: {e}")
        logger.warning("‚ö†Ô∏è  Servi√ßo funcionar√° apenas para APIs diretas")

@app.on_event("shutdown")
def shutdown_event():
    """
    Encerramento graceful do microsservi√ßo.

    - Para o listener de traps SNMP
    - Fecha todas as conex√µes SSH do pool
    - Limpa recursos
    """
    logger.info("üõë Encerrando OLT Manager - Huawei")

    try:
        # Parar listener de traps
        trap_listener.parar()
        logger.info("‚úÖ Listener de traps SNMP parado")

        # Fechar pools de conex√£o
        pool_manager.close_all()
        logger.info("‚úÖ Pools de conex√£o SSH fechados")

    except Exception as e:
        logger.error(f"‚ùå Erro durante encerramento: {e}")

    logger.info("‚úÖ Servi√ßo encerrado com sucesso")

# ============================================================================
# INFORMA√á√ïES DO SERVI√áO
# ============================================================================

@app.get("/", tags=["üìã Info"])
def service_info():
    """
    Informa√ß√µes b√°sicas do microsservi√ßo.
    """
    return {
        "service": "olt-manager-huawei",
        "version": "0.5.0",
        "description": "Microsservi√ßo para gest√£o de OLTs Huawei",
        "architecture": "Domain-Driven Design",
        "domains": {
            "olt": "Gest√£o do equipamento OLT",
            "ont": "Gest√£o de clientes ONT/ONU",
            "health": "Monitoramento do servi√ßo"
        },
        "docs": "/docs",
        "health": "/health",
        "pool_stats": "/pool-stats"
    }